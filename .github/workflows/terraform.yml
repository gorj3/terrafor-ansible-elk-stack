# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
#
name: 'Terraform Deployment'

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform steps'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:   
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: github.ref != 'refs/heads/main'
      run: terraform plan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -var="password=${{secrets.MASTER_KEY}}"
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        
  # Job to create list of IPs in elk_rg 
  azure:
    name: 'Ansible steps'
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true 
  
    - name: Get IP of Ansible MGMT VM
      uses: azure/powershell@v1
      with:
        inlineScript: |
          $ip = (Get-AzPublicIpAddress -ResourceGroupName elk_rg -VirtualMachineScaleSetName mgmt).IpAddress
          echo "MGMT_IP=$ip" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
        azPSVersion: '3.1.0'

    - name: Execute Ansible playbooks in MGMT VM
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.MGMT_IP }}
        username: "jorgesoft"
        password: ${{ secrets.MASTER_KEY }}
        command_timeout: 20m
        script: |
          cd /terraform-ansible-elk-stack/ansible
          ansible-galaxy install elastic.elasticsearch,v7.13.3
          ansible-galaxy install elastic.beats,v7.13.4
          ansible-playbook -i hosts ./elasticsearch.yml -e "ansible_user=jorgesoft ansible_ssh_pass=${{ secrets.MASTER_KEY }} ansible_sudo_pass=${{ secrets.MASTER_KEY }}"
          ansible-playbook -i hosts ./site.yml -e "ansible_user=jorgesoft ansible_ssh_pass=${{ secrets.MASTER_KEY }} ansible_sudo_pass=${{ secrets.MASTER_KEY }}"
